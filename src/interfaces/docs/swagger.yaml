openapi: 3.0.3
info:
  title: Auth Service API
  description: Serviço de autenticação com JWT, Refresh Token, proteção CSRF, rate-limit, validação e logging.
  version: "1.1.0"
servers:
  - url: http://localhost:3000/api/auth
    description: Servidor de Desenvolvimento
tags:
  - name: Auth
  - name: Token
  - name: Usuário
paths:
  /csrf-token:
    get:
      tags:
        - Auth
      summary: Retorna o token CSRF
      description: Endpoint para recuperar o token CSRF que deve ser enviado em requisições protegidas.
      responses:
        '200':
          description: Token CSRF retornado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  csrfToken:
                    type: string
                    example: a1b2c3d4e5f6

  /login:
    post:
      tags:
        - Auth
      summary: Login do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: usuario@exemplo.com
                password:
                  type: string
                  example: senha123
      parameters:
        - in: header
          name: X-CSRF-Token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Requisição mal formatada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /refresh:
    post:
      tags:
        - Token
      summary: Gerar novo Access Token via Refresh Token
      parameters:
        - in: header
          name: X-CSRF-Token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Novo Access Token gerado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '401':
          description: Refresh Token inválido ou CSRF inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /me:
    get:
      tags:
        - Usuário
      summary: Buscar dados do usuário autenticado
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dados do usuário retornados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Token inválido ou ausente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logout:
    post:
      tags:
        - Auth
      summary: Logout do usuário
      parameters:
        - in: header
          name: X-CSRF-Token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Logout realizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Logout realizado com sucesso

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "65432abc123"
        email:
          type: string
          example: usuario@exemplo.com

    LoginResponse:
      type: object
      properties:
        msg:
          type: string
          example: Login realizado com sucesso
        user:
          $ref: '#/components/schemas/User'
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    RefreshResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        msg:
          type: string
          example: Novo Access Token gerado com sucesso.

    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'

    Error:
      type: object
      properties:
        name:
          type: string
          example: UnauthorizedError
        message:
          type: string
          example: CSRF token inválido
        statusCode:
          type: integer
          example: 403
